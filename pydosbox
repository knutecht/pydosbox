#!/usr/bin/env python3

# Author: Panayotis Katsaloulis
# email:  http://www.panayotis.com
# 
# Frontend of DOSBox emulator, written in python and pygtk

# Copyright (C) 2003 Panayotis Katsaloulis
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# or check http://www.gnu.org

import gi,os
gi.require_version("Gtk","3.0")
from gi.repository import Gtk

class Base:
	def __init__(self):

		self.opt_fullscreen = ""
		self.opt_exit = ""
		self.gamelist = []
		self.dosboxpath = "/usr/bin/dosbox"
		#Create main window
		self.window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
		
		# Create executable chooser
		self.exec_hbox = Gtk.HBox()
		self.browse = Gtk.Button("Browse")
		self.executable = Gtk.Entry()
		self.execlabel = Gtk.Label(label="Executable")
		self.exec_hbox.pack_start(self.execlabel, False, False, 0)
		self.exec_hbox.pack_start(self.executable, True, True, 0)
		self.exec_hbox.pack_start(self.browse, False, False, 0)
		
		self.profbox = Gtk.HBox()
		self.store_b = Gtk.Button ("Store")
		self.delete_b = Gtk.Button ("Delete")
		self.profbox.pack_start(self.store_b, True, True, 0)
		self.profbox.pack_start(self.delete_b, True, True, 0)

		# Browser creation


		# DOSBOX options
		self.optbox = Gtk.VBox()
		self.fullscreen = Gtk.CheckButton ("Full screen mode")
		self.exitb = Gtk.CheckButton ("Exit DOS mode after program fiishes")
		self.execb = Gtk.Button ("Execute Game")
		self.name_label = Gtk.Label(label="Name of the game")
		self.gname = Gtk.Entry()
		self.separator = Gtk.HSeparator()
		self.optbox.pack_start(self.name_label, False, False, 0)
		self.optbox.pack_start(self.gname, False, False, 0)
		self.optbox.pack_start(self.separator, False, False, 5)
		self.optbox.pack_start(self.exec_hbox, False, False, 0)
		self.optbox.pack_start(self.fullscreen, False, False, 0)
		self.optbox.pack_start(self.exitb, False, False, 0)
		self.optbox.pack_start(self.execb, False, False, 0)
		self.optbox.pack_start(Gtk.Label(" ", True, True, 0), True, True, 0)
		self.optbox.pack_end(self.profbox, False, False, 0)
		
		# Games list
		self.scr_window = Gtk.ScrolledWindow()
		self.scr_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
		self.model = Gtk.ListStore(str)
		self.tree = Gtk.TreeView(self.model)
		self.selection = self.tree.get_selection()
		cell = Gtk.CellRendererText()
		self.tree.show()
		self.scr_window.add_with_viewport (self.tree)
		self.scr_window.show()
		column = Gtk.TreeViewColumn("Game Presets", cell, text=0)
		self.tree.append_column(column)
		self.scr_window.set_size_request(200, 400)
		

		# Pack *all* remaining components
		self.hpane = Gtk.HPaned()
		self.hpane.add1(self.scr_window)
		self.hpane.add2(self.optbox)
		self.window.add(self.hpane)
		self.window.set_size_request(620, 400)

		# Make all objects visible
		self.exec_hbox.show()
		self.browse.show()
		self.executable.show()
		self.execlabel.show()
		self.store_b.show()
		self.delete_b.show()
		self.name_label.show()
		self.gname.show()
		self.separator.show()
		self.profbox.show()
		self.optbox.show()
		self.fullscreen.show()
		self.exitb.show()
		self.execb.show()
		self.hpane.show()
		self.window.show()

		# Handle GUI events
		self.window.connect("delete_event", self.delete_event)
		self.window.connect("destroy", self.destroy)
		self.execb.connect("clicked", self.exec_game)
		self.browse.connect("clicked", self.browse_filename)
		self.store_b.connect("clicked", self.add_profile)
		self.delete_b.connect("clicked", self.delete_profile)
		self.fullscreen.connect("toggled", self.full_toggle)
		self.exitb.connect("toggled", self.dos_toggle)
		self.selection.connect("changed", self.profile_select)
	
		self.restore_profiles()

		Gtk.main()

		
	def delete_event(self, widget, event, data=None):
		return False
		
	def destroy(self, widget, data=None):
		self.store_profiles()
		Gtk.main_quit()

	def exec_game(self, widget, data=None):
		cmd=["dosbox"]
		if ( self.opt_fullscreen != "" ):
			cmd.append(self.opt_fullscreen)
		if ( self.executable.get_text() != "" ):
			cmd.append(self.executable.get_text())
		if ( self.opt_exit != "" ):
			cmd.append(self.opt_exit)
		print("Execute", self.dosboxpath, "with arguments", cmd)
		self.pid=os.spawnv( os.P_NOWAIT, self.dosboxpath, cmd)
	
	def full_toggle(self, widget, data=None):
		self.opt_fullscreen = ("", "-fullscreen")[widget.get_active()]
	
	def dos_toggle(self, widget, data=None):
		self.opt_exit = ("", "-exit")[widget.get_active()]


	def browse_filename(self, widget, data=None):
		file_browser = Gtk.FileChooserDialog(
            "Please provive with the Executable filename",
            self,
            Gtk.FileChooserAction.OPEN,
            (
                Gtk.STOCK_CANCEL,
                Gtk.ResponseType.CANCEL,
                Gtk.STOCK_OPEN,
                Gtk.ResponseType.OK,
            ),
        )
		file_browser.ok_button.connect("clicked", self.browse_ok)
		file_browser.cancel_button.connect("clicked", self.browse_cancel, "cancel")
		file_browser.connect("delete_event", self.browse_ignore)
		file_brower.show()

	def browse_ok(self, widget, data=None):
		self.executable.set_text(self.filesel.get_filename())
		self.filesel.hide()

	def browse_cancel(self, widget, data=None):
		self.filesel.hide()

	def browse_ignore (self, widget, data=None):
		self.filesel.hide()
		return True
	
	def add_profile (self, widget, data=None):
		self.add_to_list( self.gname.get_text(), self.executable.get_text(), self.fullscreen.get_active(), self.exitb.get_active())

	def delete_profile (self, widget, data=None):
		iterat = self.selection.get_selected()
		path = self.model.get_path(iterat[1])
		if ( path[0] > 0 ):
			self.model.remove(iterat[1])
			self.gamelist.pop(path[0])
			self.store_profiles()

	def add_to_list ( self, name_s, path_s, full_s, dos_s ):
		if (name_s == ""):
			name_s = "Unnamed"
		self.gamelist.append( (name_s, path_s, full_s, dos_s) )
		iter = self.model.append()
		self.model.set(iter, 0, name_s)
		self.store_profiles()
	
	def profile_select (self, widget, data=None):
		iterat = self.selection.get_selected()
		path = self.model.get_path(iterat[1])
		data = self.gamelist[path[0]]
		self.gname.set_text(data[0])
		self.executable.set_text(data[1])
		self.fullscreen.set_active(data[2])
		self.exitb.set_active(data[3])

	def store_profiles (self):
		filename = self.get_prefs_filename()
		outfile = open(filename,'w')
		outfile.write("self.dosboxpath = \"")
		outfile.write(self.dosboxpath)
		outfile.write("\"\nself.profiles = [")
		lprefix = ""
		for dat in self.gamelist:
			outfile.write(lprefix)
			outfile.write("\n(\"")
			outfile.write(dat[0])
			outfile.write("\", \"")
			outfile.write(dat[1])
			outfile.write("\", ")
			outfile.write(("False", "True")[dat[2]])
			outfile.write(", ")
			outfile.write(("False", "True")[dat[3]])
			outfile.write(")")
			lprefix=", "
		outfile.write("]\n")
		outfile.close()

	def restore_profiles (self):
		filename=self.get_prefs_filename()
		try:
			outfile = open(filename,'r')
			exec(open(filename).read())
			outfile.close()
			for dat in self.profiles:
				self.add_to_list(dat[0], dat[1], dat[2], dat[3])
		except IOError:
			print("Filename",filename,"not found. Creating with default parameters.")
			self.add_to_list ('Default', '', False, False)
			
	
	def get_prefs_filename (self):
		home = os.environ.get('HOME')
		return home+'/'+'.pydosbox'

prog=Base()
